@page "/legaldocuments2"
@using Framework.Base.Service.ListView
@using Framework.Base.Types.Enums
@using Framework.User.Service.Contract.Interfaces
@using Framework.User.Service.Contract.Models
@inject ILegalDocumentService _legalDocumentService

<PageTitle>Documents</PageTitle>

<MudBreadcrumbs Items="breadCrumbs"></MudBreadcrumbs>

<MudTable Items="@Elements" Filter="new Func<LegalDocumentViewModel,bool>(FilterFunc)" Hover="true">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Documents</MudText>
        <MudButton Href="/legaldocuments/create" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Add</MudButton>
        <MudSelect @bind-Value="searchCulture" T="string" Label="Culture" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="@(s=>OnCultureSearch(s))">
            <MudSelectItem Value="@("All")" />
            <MudSelectItem Value="@("En")" />
            <MudSelectItem Value="@("Ru")" />
        </MudSelect>
        <MudSelect T="string" Label="Status" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="@(s=>OnStatusSearch(s))">
            <MudSelectItem Value="@("All")" />
            <MudSelectItem Value="@("Draft")" />
            <MudSelectItem Value="@("Published")" />
            <MudSelectItem Value="@("Outdated")" />
        </MudSelect>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="id" T="LegalDocumentViewModel">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="permname" T="LegalDocumentViewModel">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="title" T="LegalDocumentViewModel">Title</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="culture" T="LegalDocumentViewModel">Culture</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="status" T="LegalDocumentViewModel">Status</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="PermName">@context.PermName</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Culture">@context.Culture</MudTd>
        <MudTd DataLabel="Status">@context.Status.ToString()</MudTd>
        <MudTd>
            <MudButton Href="@("/legaldocuments/"+ context.PermName + "/createtranslation")" Variant="Variant.Outlined" Color="Color.Primary">+ transl</MudButton>
            @if(context.Status == DocumentStatus.Published)
            {
                <MudButton Href="@("/legaldocuments/"+ context.PermName + "/" + context.Culture.ToLower() + "/createversion")" Variant="Variant.Outlined" Color="Color.Primary">+ vers</MudButton>
            } 
            else if(context.Status == DocumentStatus.Draft)
            {
                <MudButton Href="@("/legaldocuments/update/" + context.Id)" Variant="Variant.Outlined" Color="Color.Primary">Update</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="(() => OnClickPublish(context))">Publish</MudButton>
            }
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>


@code {
    private MudTable<LegalDocumentViewModel>? table;

    private string searchString = string.Empty;
    private string searchCulture = string.Empty;
    private DocumentStatus? searchStatus;
    private List<LegalDocumentViewModel> Elements = new List<LegalDocumentViewModel>();
    private LegalDocumentFilterViewModel filter = new LegalDocumentFilterViewModel();
    private ListPageInfoViewModel pageInfo = new ListPageInfoViewModel
            {
                Page = 1,
                Rows = 10,
                Sort = null
            };

    private List<BreadcrumbItem> breadCrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Documents", href: null, disabled: true)
    };

    private async Task<TableData<LegalDocumentViewModel>> ServerReload(TableState state)
    {
        var filter = new LegalDocumentFilterViewModel 
        { 
            PermName =  "contains|" + searchString, 
            Culture = "equals|" + searchCulture,
            Status = searchStatus
        };

        var result = await _legalDocumentService.GetAll(filter, PageHelper.GetPageInfo(state));

        return PageHelper.GetTableData<LegalDocumentViewModel>(result);
    }

    private async Task OnSearch(string text)
    {
        filter.PermName = "contains|" + text;

        await LoadData();
    }

    private async Task OnCultureSearch(IEnumerable<string> selectedCultures)
    {
        var selectedCulture = selectedCultures?.FirstOrDefault() ?? string.Empty;
        searchCulture = selectedCulture == "All" ? string.Empty : selectedCulture.ToLower();
        filter.Culture = "equals|" + searchCulture;

        await LoadData();
    }

    private async Task OnStatusSearch(IEnumerable<string> selectedOptions)
    {
        var selectedOption = selectedOptions?.FirstOrDefault() ?? string.Empty;

        switch(selectedOption)
        {
            case "Draft": searchStatus = DocumentStatus.Draft; break;
            case "Outdated": searchStatus = DocumentStatus.Outdated; break;
            case "Published": searchStatus = DocumentStatus.Published; break;
            default: searchStatus = null; break;
        }

        filter.Status = searchStatus;

        await LoadData();
    }

    private async Task OnClickPublish(LegalDocumentViewModel el)
    {
        await _legalDocumentService.Publish(el.Id);
        el.Status = DocumentStatus.Published;
        StateHasChanged();
        //var t = Elements.FirstOrDefault(m=>m.Id==el.Id);
        //t.Status = DocumentStatus.Published;


        //var newEls = Elements.Where(m => m.Id != el.Id).ToList();
        //newEls.Add(t);
        //Elements = newEls;
    }

    private bool FilterFunc(LegalDocumentViewModel el)
    {
        return true;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var result = await _legalDocumentService.GetAll(filter, pageInfo);

        Elements = result.Items.ToList();
    }
}
