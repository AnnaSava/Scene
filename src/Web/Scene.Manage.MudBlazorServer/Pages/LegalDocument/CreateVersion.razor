@page "/legaldocuments/{permname}/{culture}/createversion"
@using Framework.User.Service.Contract.Interfaces
@using Framework.User.Service.Contract.Models
@inject ILegalDocumentService _legalDocumentService

<h3>Create new version</h3>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>

    <MudTextField Label="Permanent name" @bind-Value="model.PermName" For="@(() => model.PermName)" Disabled="true"/>
        
    <MudSelect T="string" Label="Culture" @bind-Value="model.Culture" AnchorOrigin="Origin.BottomCenter" Disabled="true">
        <MudSelectItem Value="@("En")" />
        <MudSelectItem Value="@("Ru")" />
    </MudSelect>

    <MudTextField Label="Title" @bind-Value="model.Title" For="@(() => model.Title)"/>

    <MudTextField T="string" @bind-Value="model.Info" Label="Info" Variant="Variant.Text" Lines="5" />

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Text">
            <MudTextField T="string" @bind-Value="model.Text" Label="Text" Variant="Variant.Text" Lines="20" />
        </MudTabPanel>
        <MudTabPanel Text="Comment">
            <MudTextField T="string" @bind-Value="model.Comment" Label="Comment" Variant="Variant.Text" Lines="20" />
        </MudTabPanel>
    </MudTabs>

    <MudCardActions>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>
    </MudCardActions>

</EditForm>

@code {
    [Parameter]
    public string PermName { get; set; }

    [Parameter]
    public string Culture { get; set; }

    LegalDocumentFormViewModel model = new LegalDocumentFormViewModel();
    bool success;

    protected override async Task OnInitializedAsync()
    {
        model = await _legalDocumentService.GetActual<LegalDocumentFormViewModel>(PermName, Culture.ToLower());
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await _legalDocumentService.CreateVersion(model);

        success = true;
        StateHasChanged();
    }
}
