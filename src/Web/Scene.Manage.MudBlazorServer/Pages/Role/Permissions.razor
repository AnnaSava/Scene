@page "/roles/permissions"
@using SavaDev.General.Front.Contract;
@using SavaDev.General.Front.Contract.Models;
@inject IPermissionViewService _permissionService

<PageTitle>Permissions</PageTitle>

<MudBreadcrumbs Items="breadCrumbs"></MudBreadcrumbs>

<MudTable ServerData="@(new Func<TableState, Task<TableData<PermissionViewModel>>>(ServerReload))"
    Hover="true" @ref="table">

    <ToolBarContent>
        <MudText Typo="Typo.h6">Permissions</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="name" T="PermissionViewModel">Name</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>


@code {
    private MudTable<PermissionViewModel>? table;

    private string searchString = string.Empty;

    private List<BreadcrumbItem> breadCrumbs = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Roles", href: "../roles"),
        new BreadcrumbItem("Permissions", href: null, disabled: true)
    };

    private async Task<TableData<PermissionViewModel>> ServerReload(TableState state)
    {
        var filter = new PermissionFilterViewModel { Name =  "contains|" + searchString };

        //var result = await _permissionService.GetAll(filter, PageHelper.GetPageInfo(state));

        //return PageHelper.GetTableData<PermissionViewModel>(result);
        return new TableData<PermissionViewModel>();
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table?.ReloadServerData();
    }
}
