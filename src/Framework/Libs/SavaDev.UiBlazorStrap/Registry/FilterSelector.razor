@using SavaDev.Scheme.Front.Contract.Models;
<BSInputGroup MarginBottom="Margins.Medium">      
    <BSInput InputType="InputType.Text" @bind-Value="SelectedFilterName" />

    <BSButton Color="BSColor.Primary" Target="filtersModal1">Choose filter</BSButton>

    <BSButton Color="BSColor.Light" Target="filter-edit-modal" OnClick="OnSaveModalClickHandler">
        <i class="bi-save2"></i>
    </BSButton>
    <BSButton Color="BSColor.Light" OnClick="((e) => OnRemoveFilterClickHandler(e))">
        <i class="bi-trash"></i>
    </BSButton>
</BSInputGroup>

<BSModal DataId="filter-edit-modal" @ref="modal">
    <Header>Create filter</Header>
    <Content>
        <div class="mb-3">
            <BSLabel>Name</BSLabel>
            <BSInput InputType="InputType.Text" @bind-Value="FilterFormName" />
        </div>
        <div class="mb-3">
            <BSInputCheckbox CheckedValue="@(true)" @bind-Value="FilterFormForAll" />
            <BSLabel>For all users</BSLabel>            
        </div>
    </Content>
    <Footer Context="modal">
        <BSButton MarginStart="Margins.Auto" Color="BSColor.Secondary" @onclick="modal.HideAsync">Close</BSButton>
        <BSButton Color="BSColor.Primary" OnClick="OnSaveFilterClickHandler">Save changes</BSButton>
    </Footer>
</BSModal>

<BSModal DataId="filtersModal1" Size="Size.ExtraLarge" @ref="@bsModal">
    <Header>FiltersModal</Header>
    <Content>
        <BSTable IsResponsive="true" IsStriped="true">
            <BSTHead>
                <BSTR>
                    <BSTD>Id</BSTD>
                    <BSTD>OwnerId</BSTD>
                    <BSTD>Name</BSTD>
                    <BSTD>Fields</BSTD>
                    <BSTD></BSTD>
                </BSTR>
            </BSTHead>
            <BSTBody>
                @if (Filters != null && Filters.Any())
                {
                    @foreach (var filter in Filters)
                    {
                        <BSTR>
                            <BSTD>@filter.Id</BSTD>
                            <BSTD>@filter.OwnerId</BSTD>
                            <BSTD>@filter.Name</BSTD>
                            <BSTD>@filter.Fields</BSTD>
                            <BSTD><BSButton Color="BSColor.Primary" OnClick="() => OnFilterSelectedHandler(filter)">Choose</BSButton></BSTD>
                        </BSTR>
                    }
                }
            </BSTBody>
        </BSTable>
    </Content>
    <Footer Context="modal">
        <BSButton MarginStart="Margins.Auto" Color="BSColor.Secondary" @onclick="modal.HideAsync">Close</BSButton>
    </Footer>
</BSModal>

@code {
    [Parameter]
    public List<FilterViewModel> Filters { get; set; } = new List<FilterViewModel>();
    [Parameter]
    public FilterViewModel? SelectedFilter { get; set; }
    [Parameter]
    public EventHandler<FilterViewModel> OnSelectFilter { get; set; }
    [Parameter]
    public EventHandler<FilterViewModel>? OnSaveFilterClick { get; set; }
    [Parameter]
    public EventHandler? OnRemoveFilterClick { get; set; }

    private int? SelectedFilterId = 0;
    private string? SelectedFilterName = "";
    public string? FilterFormName { get; set; }
    public bool FilterFormForAll { get; set; }

    private BSModal? bsModal;

    private BSModal? modal;

    protected override async Task OnParametersSetAsync()
    {
        SelectedFilterName = SelectedFilter?.Name;
    }

    private async Task OnFilterSelectedHandler(FilterViewModel e)
    {
        SelectedFilter = e;
        SelectedFilterName = e?.Name;
        bsModal?.HideAsync();
        OnSelectFilter.Invoke(this, e);
    }

    private async Task OnSaveModalClickHandler(EventArgs e)
    {
        FilterFormName = SelectedFilterName;
    }

    private async Task OnSaveFilterClickHandler(EventArgs e)
    {
        var model = new FilterViewModel
            {
                Name = FilterFormName,
                ForAll = FilterFormForAll
            };
        OnSaveFilterClick?.Invoke(this, model);
        await modal?.HideAsync();
    }

    private async Task OnRemoveFilterClickHandler(EventArgs e)
    {
        OnRemoveFilterClick?.Invoke(this, e);
    }

    private async Task OnChooseClick(FilterViewModel filter)
    {
        SelectedFilter = filter;
        SelectedFilterName = filter?.Name;
        bsModal?.HideAsync();
    }
}
