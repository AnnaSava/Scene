@using SavaDev.Scheme.Front.Contract.Models;
<BSInputGroup MarginBottom="Margins.Medium">      
    <BSInput InputType="InputType.Select" Value="SelectedFilterId" @onchange="@((e) => OnFilterSelectedHandler(e))">
        <option value="0">New filter</option>
        @if (Filters != null && Filters.Any())
        {
            @foreach (var conf in Filters)
            {
                <option value="@conf.Id" selected="@(SelectedFilter?.Id == conf.Id)">@conf.Name</option>
            }
        }
    </BSInput>
    <BSButton Color="BSColor.Light" Target="filter-edit-modal" OnClick="OnModalConfigClickHandler">
        <i class="bi-save2"></i>
    </BSButton>
    <BSButton Color="BSColor.Light" OnClick="((e) => OnRemoveFilterClickHandler(e))">
        <i class="bi-trash"></i>
    </BSButton>
</BSInputGroup>

<BSModal DataId="filter-edit-modal" @ref="modal">
    <Header>Create filter</Header>
    <Content>
        <div class="mb-3">
            <BSLabel>Name</BSLabel>
            <BSInput InputType="InputType.Text" @bind-Value="FilterFormName" />
        </div>
        <div class="mb-3">
            <BSInputCheckbox CheckedValue="@(true)" @bind-Value="FilterFormForAll" />
            <BSLabel>For all users</BSLabel>            
        </div>
    </Content>
    <Footer Context="modal">
        <BSButton MarginStart="Margins.Auto" Color="BSColor.Secondary" @onclick="modal.HideAsync">Close</BSButton>
        <BSButton Color="BSColor.Primary" OnClick="OnSaveFilterClickHandler">Save changes</BSButton>
    </Footer>
</BSModal>

@code {
    [Parameter]
    public List<FilterViewModel> Filters { get; set; } = new List<FilterViewModel>();
    [Parameter]
    public FilterViewModel? SelectedFilter { get; set; }
    [Parameter]
    public EventHandler<ChangeEventArgs> OnSelectFilter { get; set; }
    [Parameter]
    public EventHandler<FilterViewModel>? OnSaveFilterClick { get; set; }
    [Parameter]
    public EventHandler? OnRemoveFilterClick { get; set; }

    private int? SelectedFilterId = 0;
    public string? FilterFormName { get; set; }
    public bool FilterFormForAll { get; set; }

    private BSModal? modal;

    private async Task OnFilterSelectedHandler(ChangeEventArgs e)
    {
        OnSelectFilter.Invoke(this, e);
    }

    private async Task OnModalConfigClickHandler(EventArgs e)
    {
        SetForm(SelectedFilterId ?? 0);
    }

    private async Task OnSaveFilterClickHandler(EventArgs e)
    {
        var model = new FilterViewModel
            {
                Name = FilterFormName,
                ForAll = FilterFormForAll
            };
        OnSaveFilterClick?.Invoke(this, model);
        await modal?.HideAsync();
    }

    private async Task OnRemoveFilterClickHandler(EventArgs e)
    {
        OnRemoveFilterClick?.Invoke(this, e);
    }

    private void SetForm(long id)
    {
        if (id == 0)
        {
            FilterFormName = "";
            FilterFormForAll = false;
            return;
        }
        var filter = Filters.FirstOrDefault(m => m.Id == id);
        if (filter == null) return;
        FilterFormName = filter.Name;
        FilterFormForAll = filter.ForAll;
    }
}
